import java.nio.file.Files

ext {
	Properties properties = new Properties()
	properties.load(new FileInputStream(file("gradle/publishing.properties")))
	properties.forEach((a, b) -> set(a, b))

	modrinth_version = makeModrinthVersion(mod_version)
	display_name = makeName(mod_version)

	changelog_text = getChangelog(file(changelog_file))
}

task publishMod {
	dependsOn(tasks.getByName("curseforge"))
	dependsOn(tasks.getByName("modrinth"))
}

String makeName(String version) {
	return version + " " + minecraft_version
}

String makeModrinthVersion(String version) {
	return version + "-mc" + minecraft_version
}

static String getChangelog(File changelogFile) {
	String text = Files.readString(changelogFile.toPath())
	String[] split = text.split("-----------------")
	if (split.length != 2)
		throw new IllegalStateException("Malformed changelog")
	return split[1].trim()
}

curseforge {
	String token = System.getenv("CURSEFORGE_TOKEN")
	apiKey = token == null || token.isEmpty() ? "unset" : token
	project {
		id = curseforge_id
		changelog = changelog_text
		releaseType = release_type
		addGameVersion("Fabric")
		addGameVersion("Quilt")
		addGameVersion(minecraft_version)
		relations {
			requiredDependency("fabric-api")
			optionalDependency("cloth-config")
		}
		mainArtifact(file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")) {
			displayName = display_name
		}
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
	}
	curseGradleOptions.forgeGradleIntegration = false
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = modrinth_id
	versionNumber = modrinth_version
	versionName = display_name
	versionType = release_type
	changelog = changelog_text
	uploadFile = file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")
	gameVersions = [minecraft_version]
	loaders = ["fabric", "quilt"]
	dependencies {
		required.project("fabric-api")
		optional.project("cloth-config")
	}
}
