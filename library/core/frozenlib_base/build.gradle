import qsl.internal.Versions

plugins {
	id("qsl.module")
}

qslModule {
	name = "FrozenLib Base API"
	moduleName = "frozenlib_base"
	id = "frozenlib_base"
	description = "Basic FrozenLib implementation and utilities."
	library = "core"
	entrypoints {
		main {
			values = ["net.frozenblock.lib.FrozenMain"]
		}
		client {
			values = ["net.frozenblock.lib.FrozenClient"]
		}
		server {
			values = ["net.frozenblock.lib.FrozenServer"]
		}
	}
	injectedInterface("net/minecraft/class_1796") {
		values = ["net/frozenblock/lib/item/impl/CooldownInterface"]
	}
	injectedInterface("net/minecraft/class_1817") {
		values = ["net/frozenblock/lib/item/impl/CooldownInterface"]
	}
	injectedInterface("net/minecraft/class_1309") {
		values = [
				"net/frozenblock/lib/sound/impl/EntityLoopingSoundInterface",
				"net/frozenblock/lib/sound/impl/EntityLoopingFadingDistanceSoundInterface",
				"net/frozenblock/lib/spotting_icons/impl/EntitySpottingIconInterface"
		]
	}
	injectedInterface("net/minecraft/class_4766") {
		values = ["net/frozenblock/lib/worldgen/biome/api/FrozenBiomeSourceAccess"]
	}
	injectedInterface("net/minecraft/class_6686/class_6710") {
		values = ["org/quiltmc/qsl/frozenblock/worldgen/surface_rule/impl/QuiltSequenceMaterialRuleHooks"]
	}
	additionalMixins(
			"mixin/frozenlib.axe.mixins.json",
			"mixin/frozenlib.core.mixins.json",
			"mixin/frozenlib.entity.mixins.json",
			"mixin/frozenlib.event.mixins.json",
			"mixin/frozenlib.item.mixins.json",
			"mixin/frozenlib.menu.mixins.json",
			"mixin/frozenlib.mobcategory.mixins.json",
			"mixin/frozenlib.modmenu.mixins.json",
			"mixin/frozenlib.screenshake.mixins.json",
			"mixin/frozenlib.shovel.mixins.json",
			"mixin/frozenlib.sound.mixins.json",
			"mixin/frozenlib.spotting_icons.mixins.json",
			"mixin/frozenlib.storage.mixins.json",
			"mixin/frozenlib.tag.mixins.json",
			"mixin/frozenlib.tick.mixins.json",
			"mixin/frozenlib.worldgen.biome.mixins.json",
			"mixin/frozenlib.worldgen.structure.mixins.json",
			"mixin/frozenlib.worldgen.surface.mixins.json",

			"mixin/frozenlib_quiltmc_datafixerupper.mixins.json",
			"mixin/frozenlib_quiltmc_surface_rule.mixins.json",
			"mixin/frozenlib_quiltmc_resource_loader.mixins.json"
	)
	accessWidener()
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	maven {
		setUrl("https://jitpack.io")
	}
	maven {
		setName("Modrinth")
		setUrl("https://api.modrinth.com/maven")

		content {
			includeGroup("maven.modrinth")
		}
	}
	maven {
		setUrl("https://maven.terraformersmc.com")

		content {
			includeGroup("com.terraformersmc")
		}
	}
	maven {
		setUrl("https://maven.shedaniel.me/")
	}
	maven {
		setUrl("https://cursemaven.com")

		content {
			includeGroup("curse.maven")
		}
	}
	/*maven {
		setName("Siphalor"s Maven")
		setUrl("https://maven.siphalor.de")
	}*/
	maven {
		setUrl("https://maven.flashyreese.me/releases")
	}
	maven {
		setUrl("https://maven.flashyreese.me/snapshots")
	}
	maven {
		setUrl("https://maven.parchmentmc.org")
	}
	maven {
		setName("Quilt")
		setUrl("https://maven.quiltmc.org/repository/release")
	}

	flatDir {
		dirs("libs")
	}
}

dependencies {

	// Mod Menu
	modImplementation("com.terraformersmc:modmenu:${Versions.MOD_MENU_VERSION}")

	// Cloth Config
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${Versions.CLOTH_CONFIG_VERSION}") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "com.terraformersmc")
	}

	// TerraBlender
	modCompileOnly("curse.maven:terrablender-fabric-565956:4205731")

	testmodImplementation sourceSets.main.output

	// only affects runClient, does not affect gradlew build. add -PuseThirdPartyMods=false to not use these
	if (findProperty("useThirdPartyMods") != "false") {
		modRuntimeOnly("maven.modrinth:ferrite-core:${Versions.FERRITECORE_VERSION}")
		modRuntimeOnly("maven.modrinth:lazydfu:${Versions.LAZYDFU_VERSION}")
		//modRuntimeOnly("maven.modrinth:starlight:${starlight_version}")
		modRuntimeOnly("maven.modrinth:lithium:${Versions.LITHIUM_VERSION}")

		// Sodium Related

		/*modRuntimeOnly "maven.modrinth:iris:${iris_version}"
		modRuntimeOnly "maven.modrinth:indium:${indium_version}"
		modRuntimeOnly("me.flashyreese.mods:reeses-sodium-options:${reeses_sodium_options_version}") {
			exclude group: "net.coderbot.iris_mc1_19", module: "iris"
		}
		modRuntimeOnly "me.flashyreese.mods:sodium-extra-fabric:${sodium_extra_version}"
		modRuntimeOnly "io.github.douira:glsl-transformer:0.27.0"
		modRuntimeOnly "net.caffeinemc:mixin-config:1.0.0+1.17"*/

		modRuntimeOnly("maven.modrinth:entityculling:${Versions.ENTITYCULLING_VERSION}")
		//modRuntimeOnly("maven.modrinth:c2me-fabric:0.2.0+alpha.8.32+1.19.1-rc3")
		modRuntimeOnly("maven.modrinth:ksyxis:${Versions.KSYXIS_VERSION}")
		//modRuntimeOnly("maven.modrinth:iris:1.19.x-v1.2.5")
		modRuntimeOnly("maven.modrinth:memoryleakfix:${Versions.MEMORYLEAKFIX_VERSION}")
		modRuntimeOnly("maven.modrinth:no-unused-chunks:${Versions.NO_UNUSED_CHUNKS_VERSION}")
	}
}
