plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    mixin {
        useLegacyMixinAp = true
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    // Fabric-ASM
    modImplementation "com.github.Chocohead:Fabric-ASM:${rootProject.fabric_asm_version}"
    include "com.github.Chocohead:Fabric-ASM:${rootProject.fabric_asm_version}"

    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    // Cloth Config
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.terraformersmc")
    }

    // only affects runClient, does not affect gradlew build. add -PuseThirdPartyMods=false to not use these
    if (findProperty("useThirdPartyMods") != "false") {
        modRuntimeOnly "maven.modrinth:ferrite-core:${rootProject.ferritecore_version}"
        modRuntimeOnly "maven.modrinth:lazydfu:${rootProject.lazydfu_version}"
        modRuntimeOnly "maven.modrinth:starlight:${rootProject.starlight_version}"
        modRuntimeOnly "maven.modrinth:lithium:mc1.19.2-0.8.3"

        // Sodium Related

        /*modRuntimeOnly "maven.modrinth:iris:${iris_version}"
        modRuntimeOnly "maven.modrinth:indium:${indium_version}"
        modRuntimeOnly("me.flashyreese.mods:reeses-sodium-options:${reeses_sodium_options_version}") {
            exclude group: "net.coderbot.iris_mc1_19", module: "iris"
        }
        modRuntimeOnly "me.flashyreese.mods:sodium-extra-fabric:${sodium_extra_version}"
        modRuntimeOnly 'io.github.douira:glsl-transformer:0.27.0'
        modRuntimeOnly "net.caffeinemc:mixin-config:1.0.0+1.17"*/

        modRuntimeOnly "maven.modrinth:entityculling:${rootProject.entityculling_version}"
        //modRuntimeOnly "maven.modrinth:c2me-fabric:0.2.0+alpha.8.32+1.19.1-rc3"
        modRuntimeOnly "maven.modrinth:ksyxis:${rootProject.ksyxis_version}"
        //modRuntimeOnly "maven.modrinth:iris:1.19.x-v1.2.5"
        modRuntimeOnly "maven.modrinth:memoryleakfix:${rootProject.memoryleakfix_version}"
        modRuntimeOnly "maven.modrinth:no-unused-chunks:${rootProject.no_unused_chunks_version}"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", rootProject.version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
