import qsl.internal.ProjectConstants
import qsl.internal.Versions

buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.kohsuke:github-api:1.313")
	}
}

plugins {
	id("org.ajoberstar.grgit") version("+")
	id("com.modrinth.minotaur") version("+")
	id("com.matthewprenger.cursegradle") version("+")
	id("maven-publish")
    id("eclipse")
    id("idea")
    id("java-library")
	id("org.jetbrains.gradle.plugin.idea-ext") version("1.1.6")
	id("qsl.common")
}

project.ext.release = findProperty("releaseType") == "stable"

setArchivesBaseName(ProjectConstants.ARCHIVES_BASE_NAME)
setVersion(getVersion())
setGroup(ProjectConstants.MAVEN_GROUP)

println("FrozenLib: " + version)

sourceSets {
    testmod {
		compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

afterEvaluate {
	subprojects.stream().filter { it.path.count(":") == 1 }.each {
		project.sourceSets.main.compileClasspath += it.sourceSets.main.compileClasspath
		project.sourceSets.main.runtimeClasspath += it.sourceSets.main.runtimeClasspath
		project.sourceSets.testmod.compileClasspath += it.sourceSets.testmod.compileClasspath
		project.sourceSets.testmod.runtimeClasspath += it.sourceSets.testmod.runtimeClasspath
	}
}

loom {
	setRuntimeOnlyLog4j(true)

    runs {
        testmodClient {
            client()
            configName = "Testmod Client"
            source(sourceSets.testmod)
			programArg("--uuid=1")
        }

        testmodServer {
            server()
			configName = "Testmod Server"
            source(sourceSets.testmod)

			programArg("--nogui")
        }

		autoTestServer {
			inherit(testmodServer)
			configName = "Auto test server"

			property("fabric.autoTest")
		}
    }
}

task runAutoAllTestServer {
	group("verification")
	description("Runs all the server-sided tests automatically. \nTypically ran by the CI server.")
}

afterEvaluate {
	def generateQmjForIdea = tasks.create("generateQmjForIdea")
	project.subprojects.each {
		it.subprojects.each {
			//generateQmjForIdea.dependsOn(it.tasks.getByName("generateQmj"))
		}
	}

	idea {
		project {
			settings {
				taskTriggers {
					//afterSync(generateQmjForIdea)
				}
			}
		}
	}

	testmodRemapJar { tsk ->
		nestedJars.setFrom(Collections.emptySet())

		rootProject.subprojects.stream().filter {
			it.path.count(":") == 1
		}.forEach {
			//tsk.nestedJars.from(it.tasks.getByName("testmodRemapJar"))
		}
	}

	tasks.runAutoAllTestServer.dependsOn(tasks.runAutoTestServer)
}

configurations {
    includeModImplementation
    includeImplementation

    include.extendsFrom(includeImplementation)
    include.extendsFrom(includeModImplementation)

    implementation.extendsFrom(includeImplementation)
    modImplementation.extendsFrom(includeModImplementation)
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    maven {
        setUrl("https://jitpack.io")
    }
    maven {
        setName("Modrinth")
        setUrl("https://api.modrinth.com/maven")

        content {
            includeGroup("maven.modrinth")
        }
    }
    maven {
        setUrl("https://maven.terraformersmc.com")

        content {
            includeGroup("com.terraformersmc")
        }
    }
    maven {
        setUrl("https://maven.shedaniel.me/")
    }
    maven {
        setUrl("https://cursemaven.com")

        content {
            includeGroup("curse.maven")
        }
    }
    /*maven {
        setName("Siphalor"s Maven")
        setUrl("https://maven.siphalor.de")
    }*/
    maven {
        setUrl("https://maven.flashyreese.me/releases")
    }
    maven {
        setUrl("https://maven.flashyreese.me/snapshots")
    }
    maven {
        setUrl("https://maven.parchmentmc.org")
    }
    maven {
        setName("Quilt")
        setUrl("https://maven.quiltmc.org/repository/release")
    }

    flatDir {
        dirs("libs")
    }
}

javadoc {
    options.tags = ["reason"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    setClassifier("javadoc")
    from(javadoc.destinationDir)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    setClassifier("sources")
    from(sourceSets.main.allSource)
}

tasks.withType(JavaCompile).configureEach {
    it.options.setEncoding("UTF-8")
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.setRelease(17)
    options.setFork(true)
    options.setIncremental(true)
}

tasks.withType(Test).configureEach {
    setMaxParallelForks(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}

java {
    setSourceCompatibility(JavaVersion.VERSION_17)
    setTargetCompatibility(JavaVersion.VERSION_17)

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename({"${it}_${project.archivesBaseName}"})
    }
}

artifacts {
    archives(sourcesJar)
    archives(javadocJar)
}

String getVersion() {
    String version = "${Versions.FROZENLIB_VERSION}-${ProjectConstants.MOD_LOADER}+${Versions.MINECRAFT_VERSION.version()}"

    if (!project.release) {
        version += "-unstable"
    }

    return version
}

configurations {
    dev {
        setCanBeResolved(false)
        setCanBeConsumed(true)
    }
}

artifacts {
    archives(remapJar)
    archives(sourcesJar)
}

def env = System.getenv()

// configure the maven publication
publishing {
    publications {
        gpr(MavenPublication) {
            artifactId(archivesBaseName)
            artifact(remapJar) {
                builtBy(remapJar)
            }
            artifact(sourcesJar) {
                builtBy(remapSourcesJar)
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            setName("GitHubPackages")
            setUrl(uri("https://maven.pkg.github.com/frozenblock/frozenlib"))
            credentials {
                setUsername(env.GITHUB_USER)
                setPassword(env.GITHUB_TOKEN)
            }
        }
    }
}

configurations {
    dev {
        setCanBeResolved(false)
        setCanBeConsumed(true)
    }
}

artifacts {
    dev(jar)
}

import java.nio.file.Files

ext {
	Properties properties = new Properties()
	properties.load(new FileInputStream(file("gradle/publishing.properties")))
	properties.forEach((a, b) -> set(a, b))

	modrinth_version = makeModrinthVersion(Versions.FROZENLIB_VERSION)
	display_name = makeName(Versions.FROZENLIB_VERSION)

	changelog_text = getChangelog(file(changelog_file))
}

String makeName(String version) {
	return "${version} (${Versions.MINECRAFT_VERSION.version()})"
}

String makeModrinthVersion(String version) {
	return "${version}-mc${Versions.MINECRAFT_VERSION.version()}"
}

static String getChangelog(File changelogFile) {
	String text = Files.readString(changelogFile.toPath())
	String[] split = text.split("-----------------")
	if (split.length != 2)
		throw new IllegalStateException("Malformed changelog")
	return split[1].trim()
}

curseforge {
	String token = System.getenv("CURSEFORGE_TOKEN")
	apiKey = token == null || token.isEmpty() ? "unset" : token
	String gameVersion = curseforge_minecraft_version != "null" ? curseforge_minecraft_version : Versions.MINECRAFT_VERSION.version()
	project {
		id = curseforge_id
		changelog = changelog_text
		releaseType = release_type
		addGameVersion("Fabric")
		addGameVersion("Quilt")
		addGameVersion(gameVersion)
		relations {
			requiredDependency("fabric-api")
			optionalDependency("cloth-config")
		}
		mainArtifact(file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")) {
			displayName = display_name
		}
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
	}
	curseGradleOptions.forgeGradleIntegration = false
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = modrinth_id
	versionNumber = modrinth_version
	versionName = display_name
	versionType = release_type
	changelog = changelog_text
	uploadFile = file("build/libs/${remapJar.archiveBaseName.get()}-${version}.jar")
	gameVersions = [Versions.MINECRAFT_VERSION.version()]
	loaders = ["fabric", "quilt"]
	dependencies {
		required.project("fabric-api")
		optional.project("cloth-config")
	}
}

def getBranch() {
	def env = System.getenv()
	if (env.GITHUB_REF) {
		def branch = env.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

tasks.register('github') {
	dependsOn remapJar
	onlyIf {
		env.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(env.GITHUB_TOKEN as String)
		def repository = github.getRepository(env.GITHUB_REPOSITORY)

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("$project.version-${Versions.MINECRAFT_VERSION.version()}")
		releaseBuilder.body(changelog_text)
		releaseBuilder.commitish(getBranch())
		releaseBuilder.prerelease(release_type != "release")

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(remapSourcesJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(javadocJar.archiveFile.get().getAsFile(), "application/java-archive")
	}
}

tasks.register('publishMod') {
	dependsOn(github)
	dependsOn(tasks.getByName("curseforge"))
	dependsOn(tasks.getByName("modrinth"))
}
