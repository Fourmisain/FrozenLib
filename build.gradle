buildscript {
	dependencies {
		classpath 'org.kohsuke:github-api:+'
	}
}

plugins {
	id 'fabric-loom' version '+' apply false
	id 'io.github.juuxel.loom-quiltflower' version '+' apply false
	id 'org.ajoberstar.grgit' version '+'
	id 'com.modrinth.minotaur' version '+'
	id 'maven-publish'
    id 'eclipse'
    id 'idea'
    id 'java-library'
}

def ENV = System.getenv()

def getBranch() {
	def env = System.getenv()
	if (env.GITHUB_REF) {
		def branch = env.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

def moduleDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect {
		project.dependencies.project(path: ":$it", configuration: 'namedElements')
	}
	/*def clientOutputs = depNames.iterator().collect {
		findProject(":$it").sourceSets.client.output
	}*/

	project.dependencies {
		deps.each {
			api it
		}

		/*clientOutputs.each {
			clientImplementation it
		}*/
	}

	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				pom.withXml {
					def depsNode = asNode().appendNode("dependencies")
					deps.each {
						def depNode = depsNode.appendNode("dependency")
						depNode.appendNode("groupId", it.group)
						depNode.appendNode("artifactId", it.name)
						depNode.appendNode("version", it.version)
						depNode.appendNode("scope", "compile")
					}
				}
			}
		}
	}
}

def testDependencies(project, List<String> depNames) {
	def deps = depNames.iterator().collect { project.dependencies.project(path: ":$it", configuration: 'namedElements') }
	def clientOutputs = depNames.iterator().collect { findProject(":$it").sourceSets.client.output }

	project.dependencies {
		deps.each {
			testmodImplementation it
		}

		clientOutputs.each {
			testmodImplementation it
		}
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

allprojects {
	archivesBaseName = project.archives_base_name
	version = getVersion()
	group = project.maven_group

	apply plugin: "maven-publish"

	tasks.withType(GenerateModuleMetadata) {
		enabled = false
	}

	if (it.name == "deprecated") return

	apply plugin: "fabric-loom"
	apply plugin: "io.github.juuxel.loom-quiltflower"

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
		it.options.release = 17
		options.fork = true
		options.incremental = true
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17

		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}

	loom {
		//splitEnvironmentSourceSets()
	}

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath

			//compileClasspath += client.compileClasspath
			//runtimeClasspath += client.runtimeClasspath
		}
	}

	loom {
		runtimeOnlyLog4j = true

		runs {
			testmodClient {
				client()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Client"
				source sourceSets.testmod
			}
			testmodServer {
				server()
				ideConfigGenerated project.rootProject == project
				name = "Testmod Server"
				source sourceSets.testmod
			}
		}

		/*mixin {
			defaultRefmapName = "mixins.frozenblocklib.refmap.json"
		}

		accessWidenerPath = file("src/main/resources/frozenblocklib.accesswidener")*/
	}

	allprojects.each { p ->
		if (project.name == "deprecated") return

		loom.mods.register(p.name) {
			sourceSet p.sourceSets.main
			//sourceSet p.sourceSets.client
		}

		loom.mods.register(p.name + "-testmod") {
			sourceSet p.sourceSets.testmod
		}
	}

	configurations {
		includeModImplementation
		includeImplementation

		include.extendsFrom includeImplementation
		include.extendsFrom includeModImplementation

		implementation.extendsFrom includeImplementation
		modImplementation.extendsFrom includeModImplementation
	}

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		maven {
			url = 'https://jitpack.io'
		}
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"

			content {
				includeGroup "maven.modrinth"
			}
		}
		maven {
			url = 'https://maven.terraformersmc.com'

			content {
				includeGroup "com.terraformersmc"
			}
		}
		maven {
			url = 'https://maven.shedaniel.me/'
		}
		maven {
			url 'https://cursemaven.com'

			content {
				includeGroup "curse.maven"
			}
		}
		/*maven {
			name "Siphalor's Maven"
			url "https://maven.siphalor.de"
		}*/
		maven {
			url "https://maven.flashyreese.me/releases"
		}
		maven {
			url "https://maven.flashyreese.me/snapshots"
		}
		maven {
			url = 'https://maven.parchmentmc.org'
		}
		maven {
			name = 'Quilt'
			url = 'https://maven.quiltmc.org/repository/release'
		}

		flatDir {
			dirs 'libs'
		}
	}

	dependencies {
		// To change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings(loom.layered {
			// please annoy treetrain if this doesnt work
			it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2")
			it.parchment("org.parchmentmc.data:parchment-1.19.2:${parchment_mappings}@zip")
			it.officialMojangMappings {
				setNameSyntheticMembers(false)
			}
		})
		modApi "net.fabricmc:fabric-loader:${loader_version}"
		// Fabric API. This is technically optional, but you probably want it anyway.
		modApi "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

		// Fabric-ASM
		modApi "com.github.Chocohead:Fabric-ASM:${fabric_asm_version}"
		include "com.github.Chocohead:Fabric-ASM:${fabric_asm_version}"

		// Mod Menu
		modApi "com.terraformersmc:modmenu:${modmenu_version}"

		// Cloth Config
		modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
			exclude(group: "net.fabricmc.fabric-api")
			exclude(group: "com.terraformersmc")
		}

		testmodImplementation sourceSets.main.output
		//testmodImplementation sourceSets.client.output

		// only affects runClient, does not affect gradlew build. add -PuseThirdPartyMods=false to not use these
		if (findProperty("useThirdPartyMods") != "false") {
			modRuntimeOnly "maven.modrinth:ferrite-core:${ferritecore_version}"
			modRuntimeOnly "maven.modrinth:lazydfu:${lazydfu_version}"
			//modRuntimeOnly "maven.modrinth:starlight:${starlight_version}"
			modRuntimeOnly "maven.modrinth:lithium:${lithium_version}"

			// Sodium Related

			/*modRuntimeOnly "maven.modrinth:iris:${iris_version}"
			modRuntimeOnly "maven.modrinth:indium:${indium_version}"
			modRuntimeOnly("me.flashyreese.mods:reeses-sodium-options:${reeses_sodium_options_version}") {
				exclude group: "net.coderbot.iris_mc1_19", module: "iris"
			}
			modRuntimeOnly "me.flashyreese.mods:sodium-extra-fabric:${sodium_extra_version}"
			modRuntimeOnly 'io.github.douira:glsl-transformer:0.27.0'
			modRuntimeOnly "net.caffeinemc:mixin-config:1.0.0+1.17"*/

			modRuntimeOnly "maven.modrinth:entityculling:${entityculling_version}"
			//modRuntimeOnly "maven.modrinth:c2me-fabric:0.2.0+alpha.8.32+1.19.1-rc3"
			modRuntimeOnly "maven.modrinth:ksyxis:${ksyxis_version}"
			//modRuntimeOnly "maven.modrinth:iris:1.19.x-v1.2.5"
			modRuntimeOnly "maven.modrinth:memoryleakfix:${memoryleakfix_version}"
			modRuntimeOnly "maven.modrinth:no-unused-chunks:${no_unused_chunks_version}"
		}
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	tasks.withType(AbstractArchiveTask) {
		preserveFileTimestamps = false
		reproducibleFileOrder = true
	}

}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }
}

javadoc {
	options {
		source = "17"
		encoding = "UTF-8"
		charSet = "UTF-8"
		memberLevel = JavadocMemberLevel.PACKAGE
		links(
				"https://guava.dev/releases/31.0-jre/api/docs/",
				"https://asm.ow2.io/javadoc/",
				"https://docs.oracle.com/en/java/javase/17/docs/api/",
				"https://jenkins.liteloader.com/job/Mixin/javadoc/",
				"https://logging.apache.org/log4j/2.x/log4j-api/apidocs/",
				"https://www.slf4j.org/apidocs/",
				"https://netty.io/4.1/api/",
				"https://javadoc.lwjgl.org/",
				"https://www.javadoc.io/doc/com.google.code.gson/gson/2.9.1/",
				"https://fastutil.di.unimi.it/docs/"
		)
		tags = ["reason"]
		// Disable the crazy super-strict doclint tool in Java 8
		addStringOption("Xdoclint:none", "-quiet")
	}

	allprojects.each {
		if (it.name == "deprecated") return

		source(it.sourceSets.main.allJava.srcDirs)
		//source(it.sourceSets.client.allJava.srcDirs)
	}

	classpath = files(sourceSets.main.compileClasspath/*, sourceSets.client.compileClasspath*/)
	include("**/api/**")
	failOnError false
}


javadoc {
    options.tags = ["reason"]
}

subprojects {
	if (it.name == "deprecated") return

	dependencies {
		testmodImplementation sourceSets.main.output
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(remapJar) {
					builtBy(remapJar)
				}

				artifact(remapSourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}
	}

	loom {
		mixin {
			add(sourceSets.main, project.name + ".refmap.json")
			add(sourceSets.testmod, project.name + "_testmod.refmap.json")
		}
	}

	javadoc.enabled = false

	afterEvaluate {
		// Disable the gen sources task on sub projects
		//genClientOnlySourcesWithFernFlower.enabled = false
		//genClientOnlySourcesWithCfr.enabled = false
		//genCommonSourcesWithCfr.enabled = false
		//genCommonSourcesWithFernFlower.enabled = false
		//unpickClientOnlyJar.enabled = false
		//unpickCommonJar.enabled = false
	}
}

subprojects.each {
	if (it.name == "deprecated") return

	remapJar.dependsOn("${it.path}:remapJar")
}

sourceSets {
	testmod
}

dependencies {
	afterEvaluate {
		subprojects.each {
			if (it.name == "deprecated") return

			api project(path: "${it.path}", configuration: "namedElements")
			//clientImplementation project("${it.path}:").sourceSets.client.output

			testmodImplementation project("${it.path}:").sourceSets.testmod.output
		}
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			if (it.name == "deprecated") return

			// Include the signed or none signed jar from the sub project.
			nestedJars.from project("${it.path}").tasks.getByName("remapJar")
		}
	}
}

tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

String getVersion() {
    String version = "${mod_version}-${mod_loader}+${minecraft_version}"

    if (findProperty("releaseType") != "stable") {
        version += "-unstable"
    }

    return version
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    archives remapJar
    archives sourcesJar
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task release(dependsOn: [remapJar, sourcesJar, javadocJar]) {
	onlyIf {
		env.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(env.GITHUB_TOKEN as String)
		def repository = github.getRepository("FrozenBlock/FrozenLib")

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("${mod_version}-")
		releaseBuilder.body(env.CHANGELOG ?: "No changelog provided")
		releaseBuilder.commitish(getBranch())

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(sourcesJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(javadocJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.delete()
	}
}

// configure the maven publication
publishing {
    publications {
        gpr(MavenPublication) {
            artifactId archivesBaseName
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/frozenblock/frozenlib")
            credentials {
                username = ENV.GITHUB_USER
                password = ENV.GITHUB_TOKEN
            }
        }
    }
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    dev jar
}
