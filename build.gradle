plugins {
	id("fabric-loom") version("+")
	id("io.github.juuxel.loom-quiltflower") version("+")
	//id("org.ajoberstar.grgit") version("+")
	id("org.quiltmc.gradle.licenser") version("+")
	id("com.modrinth.minotaur") version("+")
	id("maven-publish")
    id("eclipse")
    id("idea")
    id("java-library")
}

project.ext.release = findProperty("releaseType") == "stable"

setArchivesBaseName(project.archives_base_name)
setVersion(getVersion())
setGroup(project.maven_group)

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

loom {
	setRuntimeOnlyLog4j(true)

    runs {
        testmodClient {
            client()
            ideConfigGenerated(project.rootProject == project)
            name("Testmod Client")
            source(sourceSets.testmod)
        }
        testmodServer {
            server()
            ideConfigGenerated(project.rootProject == project)
            name("Testmod Server")
            source(sourceSets.testmod)
        }
    }

    mixin {
        setDefaultRefmapName("mixins.frozenlib.refmap.json")
    }

    setAccessWidenerPath(file("src/main/resources/frozenlib.accesswidener"))
	interfaceInjection {
		// When enabled injected interfaces from dependecies will be applied.
		setEnableDependencyInterfaceInjection(true)
	}
}

configurations {
    includeModImplementation
    includeImplementation

    include.extendsFrom(includeImplementation)
    include.extendsFrom(includeModImplementation)

    implementation.extendsFrom(includeImplementation)
    modImplementation.extendsFrom(includeModImplementation)
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    maven {
        setUrl("https://jitpack.io")
    }
    maven {
        setName("Modrinth")
        setUrl("https://api.modrinth.com/maven")

        content {
            includeGroup("maven.modrinth")
        }
    }
    maven {
        setUrl("https://maven.terraformersmc.com")

        content {
            includeGroup("com.terraformersmc")
        }
    }
    maven {
        setUrl("https://maven.shedaniel.me/")
    }
    maven {
        setUrl("https://cursemaven.com")

        content {
            includeGroup("curse.maven")
        }
    }
    /*maven {
        setName("Siphalor"s Maven")
        setUrl("https://maven.siphalor.de")
    }*/
    maven {
        setUrl("https://maven.flashyreese.me/releases")
    }
    maven {
        setUrl("https://maven.flashyreese.me/snapshots")
    }
    maven {
        setUrl("https://maven.parchmentmc.org")
    }
    maven {
        setName("Quilt")
        setUrl("https://maven.quiltmc.org/repository/release")
    }

    flatDir {
        dirs("libs")
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft("com.mojang:minecraft:${minecraft_version}")
	mappings(loom.layered {
		// please annoy treetrain if this doesnt work
		it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-1.19.2:${parchment_mappings}@zip")
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	})
    modImplementation("net.fabricmc:fabric-loader:${loader_version}")
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_version}")

    // Mod Menu
    modImplementation("com.terraformersmc:modmenu:${modmenu_version}")

    // Cloth Config
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.terraformersmc")
    }

	// TerraBlender
	modCompileOnly("curse.maven:terrablender-fabric-565956:4205731")

    testmodImplementation sourceSets.main.output

    // only affects runClient, does not affect gradlew build. add -PuseThirdPartyMods=false to not use these
    if (findProperty("useThirdPartyMods") != "false") {
        modRuntimeOnly("maven.modrinth:ferrite-core:${ferritecore_version}")
        modRuntimeOnly("maven.modrinth:lazydfu:${lazydfu_version}")
        //modRuntimeOnly("maven.modrinth:starlight:${starlight_version}")
        modRuntimeOnly("maven.modrinth:lithium:${lithium_version}")

        // Sodium Related

        /*modRuntimeOnly "maven.modrinth:iris:${iris_version}"
        modRuntimeOnly "maven.modrinth:indium:${indium_version}"
        modRuntimeOnly("me.flashyreese.mods:reeses-sodium-options:${reeses_sodium_options_version}") {
            exclude group: "net.coderbot.iris_mc1_19", module: "iris"
        }
        modRuntimeOnly "me.flashyreese.mods:sodium-extra-fabric:${sodium_extra_version}"
        modRuntimeOnly "io.github.douira:glsl-transformer:0.27.0"
        modRuntimeOnly "net.caffeinemc:mixin-config:1.0.0+1.17"*/

        modRuntimeOnly("maven.modrinth:entityculling:${entityculling_version}")
        //modRuntimeOnly("maven.modrinth:c2me-fabric:0.2.0+alpha.8.32+1.19.1-rc3")
        modRuntimeOnly("maven.modrinth:ksyxis:${ksyxis_version}")
        //modRuntimeOnly("maven.modrinth:iris:1.19.x-v1.2.5")
        modRuntimeOnly("maven.modrinth:memoryleakfix:${memoryleakfix_version}")
        modRuntimeOnly("maven.modrinth:no-unused-chunks:${no_unused_chunks_version}")
    }
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

quiltflower {
	quiltflowerVersion.set("1.9.0")
}

license {
	rule project.file("codeformat/QUILT_MODIFIED_HEADER")
	rule project.file("codeformat/HEADER")

	include("**/*.java")
}

javadoc {
    options.tags = ["reason"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    setClassifier("javadoc")
    from(javadoc.destinationDir)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    setClassifier("sources")
    from(sourceSets.main.allSource)
}

tasks.withType(JavaCompile).configureEach {
    it.options.setEncoding("UTF-8")
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.setRelease(17)
    options.setFork(true)
    options.setIncremental(true)
}

tasks.withType(Test).configureEach {
    setMaxParallelForks(Runtime.runtime.availableProcessors().intdiv(2) ?: 1)
}

java {
    setSourceCompatibility(JavaVersion.VERSION_17)
    setTargetCompatibility(JavaVersion.VERSION_17)

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename({"${it}_${project.archivesBaseName}"})
    }
}

artifacts {
    archives(sourcesJar)
    archives(javadocJar)
}

String getVersion() {
    String version = "${mod_version}-${mod_loader}+${minecraft_version}"

    if (!project.release) {
        version += "-unstable"
    }

    return version
}

configurations {
    dev {
        setCanBeResolved(false)
        setCanBeConsumed(true)
    }
}

artifacts {
    archives(remapJar)
    archives(sourcesJar)
}

def env = System.getenv()

def getBranch() {
	def env = System.getenv()
	if (env.GITHUB_REF) {
		def branch = env.GITHUB_REF
		return branch.substring(branch.lastIndexOf("/") + 1)
	}

	if (grgit == null) {
		return "unknown"
	}

	def branch = grgit.branch.current().name
	return branch.substring(branch.lastIndexOf("/") + 1)
}

//import org.kohsuke.github.GHReleaseBuilder
//import org.kohsuke.github.GitHub

task release(dependsOn: [remapJar, sourcesJar, javadocJar]) {
	onlyIf {
		env.GITHUB_TOKEN
	}
	/*
	doLast {
		def github = GitHub.connectUsingOAuth(env.GITHUB_TOKEN as String)
		def repository = github.getRepository("FrozenBlock/FrozenLib")

		def releaseBuilder = new GHReleaseBuilder(repository, version as String)
		releaseBuilder.name("${mod_version}-")
		releaseBuilder.body(env.CHANGELOG ?: "No changelog provided")
		releaseBuilder.commitish(getBranch())

		def ghRelease = releaseBuilder.create()
		ghRelease.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(sourcesJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(javadocJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.delete()
	}
	 */
}

modrinth {
	setProjectId("frozenlib")
	setVersionName("${project.mod_version}")
	setVersionType("release")
	setChangelog(env.CHANGELOG ?: "No changelog provided")

	setUploadFile(remapJar)
}

// configure the maven publication
publishing {
    publications {
        gpr(MavenPublication) {
            artifactId(archivesBaseName)
            artifact(remapJar) {
                builtBy(remapJar)
            }
            artifact(sourcesJar) {
                builtBy(remapSourcesJar)
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            setName("GitHubPackages")
            setUrl(uri("https://maven.pkg.github.com/frozenblock/frozenlib"))
            credentials {
                setUsername(env.GITHUB_USER)
                setPassword(env.GITHUB_TOKEN)
            }
        }
    }
}

configurations {
    dev {
        setCanBeResolved(false)
        setCanBeConsumed(true)
    }
}

artifacts {
    dev(jar)
}

if (!project.release) {
	build.dependsOn(applyLicenses)
}
