plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.+'
	//id 'org.quiltmc.quilt-mappings-on-loom' version '4.2.1'
	id 'maven-publish'
    id 'eclipse'
    id 'idea'
    id 'java-library'
}

archivesBaseName = project.archives_base_name
version = getVersion()
group = project.maven_group

loom {
    mixin {
        defaultRefmapName = "mixins.frozenblocklib.refmap.json"
    }

    accessWidenerPath = file("src/main/resources/frozenblocklib.accesswidener")
}

configurations {
    includeModImplementation
    includeImplementation
    includeModApi

    include.extendsFrom includeImplementation
    include.extendsFrom includeModImplementation
    include.extendsFrom includeModApi

    implementation.extendsFrom includeImplementation
    modImplementation.extendsFrom includeModImplementation
    modApi.extendsFrom includeModApi
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    maven {
        url = 'https://jitpack.io'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"

        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url = 'https://maven.terraformersmc.com'

        content {
            includeGroup "com.terraformersmc"
        }
    }
    maven {
        url = 'https://maven.shedaniel.me/'
    }
    maven {
        url 'https://cursemaven.com'

        content {
            includeGroup "curse.maven"
        }
    }
    /*maven {
        name "Siphalor's Maven"
        url "https://maven.siphalor.de"
    }*/
    maven {
        url "https://maven.flashyreese.me/releases"
    }
    maven {
        url "https://maven.flashyreese.me/snapshots"
    }
    maven {
        url = "https://maven.oroarmor.com"
    }
    maven {
        url = 'https://maven.parchmentmc.org'
    }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${minecraft_version}"
    //mappings loom.officialMojangMappings()
    mappings(loom.layered {
        // please annoy treetrain if this doesnt work
        it.mappings("org.quiltmc:quilt-mappings:1.19.2+build.intermediary-test.1:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-1.19.2:${parchment_mappings}@zip")
        it.officialMojangMappings {
            setNameSyntheticMembers(false)
        }
    })
    /*mappings(loom.layered {
        addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:v2"))
        //mappings "net.fabricmc:yarn:1.19.2+build.4:v2"
        officialMojangMappings()
    })*/
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    // Fabric-ASM
    includeModImplementation "com.github.Chocohead:Fabric-ASM:${fabric_asm_version}"

    // Mod Menu
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

    // Cloth Config
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.terraformersmc")
    }

    // only affects runClient, does not affect gradlew build. add -PuseThirdPartyMods=false to not use these
    if (findProperty("useThirdPartyMods") != "false") {
        modRuntimeOnly "maven.modrinth:ferrite-core:${ferritecore_version}"
        modRuntimeOnly "maven.modrinth:lazydfu:${lazydfu_version}"
        modRuntimeOnly "maven.modrinth:starlight:${starlight_version}"
        modRuntimeOnly "maven.modrinth:lithium:mc1.19.2-0.8.3"

        // Sodium Related

        /*modRuntimeOnly "maven.modrinth:iris:${iris_version}"
        modRuntimeOnly "maven.modrinth:indium:${indium_version}"
        modRuntimeOnly("me.flashyreese.mods:reeses-sodium-options:${reeses_sodium_options_version}") {
            exclude group: "net.coderbot.iris_mc1_19", module: "iris"
        }
        modRuntimeOnly "me.flashyreese.mods:sodium-extra-fabric:${sodium_extra_version}"
        modRuntimeOnly 'io.github.douira:glsl-transformer:0.27.0'
        modRuntimeOnly "net.caffeinemc:mixin-config:1.0.0+1.17"*/

        modRuntimeOnly "maven.modrinth:entityculling:${entityculling_version}"
        //modRuntimeOnly "maven.modrinth:c2me-fabric:0.2.0+alpha.8.32+1.19.1-rc3"
        modRuntimeOnly "maven.modrinth:ksyxis:${ksyxis_version}"
        //modRuntimeOnly "maven.modrinth:iris:1.19.x-v1.2.5"
        modRuntimeOnly "maven.modrinth:memoryleakfix:${memoryleakfix_version}"
        modRuntimeOnly "maven.modrinth:no-unused-chunks:${no_unused_chunks_version}"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

javadoc {
    options.tags = ["reason"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
    options.fork = true
    options.incremental = true
}

tasks.withType(Test).configureEach {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

String getVersion() {
    String version = "${mod_version}-${mod_loader}+${minecraft_version}"

    if (findProperty("releaseType") != "stable") {
        version += "-unstable"
    }

    return version
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    archives remapJar
    archives sourcesJar
}

def env = System.getenv()

// configure the maven publication
publishing {
    publications {
        gpr(MavenPublication) {
            artifactId archivesBaseName
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/frozenblock/frozenlib")
            credentials {
                username = env.GITHUB_USER
                password = env.GITHUB_TOKEN
            }
        }
    }
}

configurations {
    dev {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    dev jar
}
